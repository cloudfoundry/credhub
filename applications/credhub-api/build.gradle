buildscript {
    repositories {
        mavenCentral()
        maven { url("https://repo.spring.io/plugins-release") }
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply from: "${rootDir.toPath()}/kotlin.gradle"
apply from: "${rootDir.toPath()}/ktlint.gradle"

repositories {
    mavenCentral()
}

dependencies {
    implementation project(":backends:credhub")
    implementation project(":backends:shared-backend-configuration")
    implementation project(":components:audit")
    implementation project(":components:auth")
    implementation project(":components:constants")
    implementation project(":components:credentials")
    implementation project(":components:encryption")
    implementation project(":components:errors")
    implementation project(":components:generate")
    implementation project(":components:management")
    implementation project(":components:permissions")
    implementation project(":components:string-utilities")
    implementation project(":components:time-support")

    testImplementation project(path: ":components:test-support", configuration: "testOutput")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.security:spring-security-web")
    implementation('org.springframework.boot:spring-boot-starter-security')

    testImplementation project(path: ":components:test-support", configuration: "testOutput")

    // DB
    implementation("org.postgresql:postgresql:${postgresqlJdbcVersion}")

    implementation("org.mariadb.jdbc:mariadb-java-client:${mariadbJdbcVersion}")
    implementation("org.flywaydb:flyway-core:${flywayVersion}")
    implementation("com.h2database:h2:${h2Version}")

    api("org.bouncycastle:bc-fips:${bcFipsVersion}")
    api("org.bouncycastle:bcpkix-fips:${bcpkixFipsVersion}")

    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("org.apache.commons:commons-lang3:${apacheCommonsLang3Version}")

    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("junit:junit")
}

configurations.all {
    exclude module: "spring-boot-starter-logging"
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

bootRun {
    sourceResources sourceSets.main
    if (project.hasProperty("debugs") && project.debugs) {
        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"]
    } else if (project.hasProperty("debug") && project.debug) {
        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
    }
    systemProperties = System.properties
    systemProperties["spring.profiles.active"] = System.getProperty("spring.profiles.active", "dev, dev-h2")
}

bootJar {
    archiveFileName = "credhub.jar"
    def versionFile = new File("$projectDir/src/main/resources/version")
}

test {
    testLogging {
        events "started", "passed", "failed", "skipped"
        exceptionFormat "full"
    }

    systemProperties = System.properties
    systemProperties["spring.profiles.active"] = System.getProperty("spring.profiles.active", "unit-test-h2")
    systemProperties["java.security.egd"] = System.getProperty("java.security.egd", "file:/dev/urandom")
    outputs.upToDateWhen { false }
}
