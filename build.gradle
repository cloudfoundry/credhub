import org.cloudfoundry.credhub.gradlebuild.DependenciesGraphPlugin

buildscript {
    ext {
        asciiDoctorConvertPluginVersion = '4.0.5'
        bcpkixFipsVersion = '2.1.10'
        bcFipsVersion = '2.1.2'
        flywayVersion = '11.15.0'
        guavaVersion = '33.5.0-jre'
        kotlinVersion = '2.2.20'
        ktlintVersion = '1.5.0'
        passayVersion = '1.6.6'
        springBootVersion = '3.5.6'
        mariadbJdbcVersion = '2.7.12' // Bumping to v3 breaks some pipeline jobs, so pinning to v2 for now. v2 (current version) is stable and will be supported until about September 2025 (https://mariadb.com/kb/en/about-mariadb-connector-j/).
        grpcVersion = '1.76.0'
        // We need to stay with protobuf-java & protoc 3.25.x as the latest
        // grpc still depends on protobuf-java & protoc 3.25.x. Once we
        // bump grpc to version that depnds on protobuf-java & protoc to 4.x.x,
        // it is likely that we are going to get conflicts because we also have
        // direct dependency to protobuf 3.25.x. We will need to bump protobuf
        // version to 4.x.x then.
        protoBufJavaVersion = '3.25.8'
        protoCVersion = '3.25.8'
    }
    repositories {
        mavenCentral()
        maven { url("https://repo.spring.io/plugins-release") }
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.owasp:dependency-check-gradle:12.1.8")
        classpath("org.bouncycastle:bc-fips:${bcFipsVersion}")
        classpath("org.bouncycastle:bcpkix-fips:${bcpkixFipsVersion}")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.53.0'
}

apply plugin: DependenciesGraphPlugin
apply plugin: "org.owasp.dependencycheck"

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

subprojects {
    plugins.withType(JavaPlugin) {
        dependencies {
            implementation("org.yaml:snakeyaml")
            implementation("com.h2database:h2")
            implementation("com.google.guava:guava:${guavaVersion}")
            testImplementation("org.mockito:mockito-core")
        }
    }
}

// Override spring boot's kotllin version dependency
ext['kotlin.version'] = '${kotlinVersion}'
// pin spring-data to its last working version due to a regression in the latest version provided by spring-boot, see: https://github.com/spring-projects/spring-data-jpa/issues/4015
// the issue has been fixed, but the fix has not been released alongside with spring-boot yet; when it has, this pinning can be removed
ext['spring-data-bom.version'] = '2025.0.3'

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)
